<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>京东滑块验证自动登录</title>
    <url>/2023/05/29/article-title/</url>
    <content><![CDATA[<h3 id="一、环境依赖"><a href="#一、环境依赖" class="headerlink" title="一、环境依赖"></a>一、环境依赖</h3><ul>
<li>Anaconda version 1.7.2</li>
<li>Python 3.7.0</li>
<li>根目录下requirements.txt</li>
</ul>
<h3 id="二、环境部署"><a href="#二、环境部署" class="headerlink" title="二、环境部署"></a>二、环境部署</h3><p>在根目录下执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h3 id="三、目录结构"><a href="#三、目录结构" class="headerlink" title="三、目录结构"></a>三、目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- JdAutoLogin</span><br><span class="line">    |-- Readme.md   帮助文档</span><br><span class="line">    |-- requirements.txt    环境依赖 </span><br><span class="line">    |-- src</span><br><span class="line">        |-- main.py     定时任务入口文件</span><br><span class="line">        |-- RunSpider.py    自动登录京东可添加后续爬虫代码</span><br><span class="line">        |-- setting</span><br><span class="line">            |-- setting.yaml    配置文件</span><br><span class="line">        |-- Utils.py    工具类</span><br><span class="line">            |--SpiderUtils.py   登录所需工具类和函数</span><br><span class="line">        |-- chromedriver_win32      浏览器驱动</span><br><span class="line">        |   |-- chromedriver.exe    </span><br><span class="line">        |-- images      </span><br><span class="line">        |   |-- background_img.png      滑块验证背景图</span><br><span class="line">        |   |-- out.jpg     滑块缺口位置图</span><br><span class="line">        |   |-- slide_img.png   滑块图</span><br><span class="line">        |-- Login_Accomplish</span><br><span class="line">        |   |-- JdLogin.py  继承基本类实现京东的登录</span><br><span class="line">        |   |-- Login.py    登录基本类</span><br></pre></td></tr></table></figure>

<h3 id="四、项目启动"><a href="#四、项目启动" class="headerlink" title="四、项目启动"></a>四、项目启动</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>根据需求更改setting.yaml配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">login:</span></span><br><span class="line"><span class="comment"># UserName for logging in to the website</span></span><br><span class="line">  <span class="attr">UserName:</span> <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line"><span class="comment"># PassWord for logging in to the website</span></span><br><span class="line">  <span class="attr">PassWord:</span> <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line"><span class="comment"># The URL of the login page</span></span><br><span class="line">  <span class="attr">LoginUrl:</span> <span class="string">&#x27;https://passport.jd.com/uc/login&#x27;</span></span><br><span class="line"><span class="comment"># After login, go to the URL of the page</span></span><br><span class="line">  <span class="attr">MainUrl:</span> <span class="string">&#x27;https://www.jd.com/&#x27;</span></span><br><span class="line"><span class="comment"># Number of retries for slider validation</span></span><br><span class="line">  <span class="attr">Retry_times:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><ul>
<li>运行定时任务（固定某个时间启动爬虫）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure></li>
<li>运行一次爬虫<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python RunSpider.py</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="五、项目打包"><a href="#五、项目打包" class="headerlink" title="五、项目打包"></a>五、项目打包</h3><p><strong>如果对项目进行修改需要重新打包成exe</strong></p>
<ul>
<li>cd到RunSpider.py同级目录中执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyi-makespec RunSpider.py</span><br></pre></td></tr></table></figure></li>
<li>配置RunSpider.spec文件，具体配置参数可查看<a href="https://blog.csdn.net/tangfreeze/article/details/112240342">pyinstaller配置文件参数</a></li>
<li>执行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller RunSpider.spec</span><br><span class="line">命令执行完后会生成build和dist文件夹</span><br><span class="line"></span><br><span class="line">可能提示</span><br><span class="line">ModuleNotFoundError: No module named &#x27;fake_useragent.data&#x27;</span><br></pre></td></tr></table></figure></li>
<li>使用手动添加fake-useragent（尝试配置spec自动添加无法成功）<ul>
<li>确定当前python环境中site-packages的位置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m site</span><br></pre></td></tr></table></figure></li>
<li>将 <strong>…&#x2F;site-packages&#x2F;fake-useragent</strong>文件夹复制到 <strong>dist&#x2F;RunSpider&#x2F;</strong> 目录下 </li>
<li>双击运行 <strong>dist&#x2F;RunSpider&#x2F;RunSpider.exe</strong></li>
</ul>
</li>
</ul>
<h3 id="六、演示Demo"><a href="#六、演示Demo" class="headerlink" title="六、演示Demo"></a>六、演示Demo</h3><p><img src="https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExNzRiYTFjYzNjNTJiMGY3ZTRkZTUzNjMwNzY4MTYyYTdiYWEzOGZlYSZlcD12MV9pbnRlcm5hbF9naWZzX2dpZklkJmN0PWc/2H8Q13nR71cFkD9r3q/giphy.gif" alt="image"></p>
<h3 id="七、遇到的问题"><a href="#七、遇到的问题" class="headerlink" title="七、遇到的问题"></a>七、遇到的问题</h3><h4 id="1、使用selenium的ActionChains类实现滑块验证登录问题"><a href="#1、使用selenium的ActionChains类实现滑块验证登录问题" class="headerlink" title="1、使用selenium的ActionChains类实现滑块验证登录问题"></a>1、使用selenium的ActionChains类实现滑块验证登录问题</h4><ul>
<li>虚拟鼠标：ActionChains类对鼠标的一系列点击移动操作都是<strong>建立在虚拟鼠标</strong>上的，电脑屏幕上实际看到的鼠标不会移动。</li>
<li>滑块移动轨迹问题：使用ActionChains需要自己生成滑块移动的轨迹方程，但是京东将大部分机器模拟的轨迹方程给禁止了导致正确移动到缺口位置也无法通过验证。<strong>使用pyautogui控制滑块移动的轨迹更贴合人工操作。</strong></li>
</ul>
<h4 id="2、使用pyautogui控制鼠标的坐标问题"><a href="#2、使用pyautogui控制鼠标的坐标问题" class="headerlink" title="2、使用pyautogui控制鼠标的坐标问题"></a>2、使用pyautogui控制鼠标的坐标问题</h4><ul>
<li>selenium能够直接获取网页元素然后进行操作，pyautogui必需通过获取要操作元素的坐标才能对元素进行操作。</li>
<li>selenium中也能获取元素的坐标，但是该坐标是相对于<strong>整个网页的左上角</strong>的坐标。而pyautogui中要使用的元素的坐标是相对于<strong>整个电脑屏幕左上角</strong>的坐标。所以两者要进行一次转换。</li>
</ul>
<h4 id="3、自动登录京东会遇到手机验证码"><a href="#3、自动登录京东会遇到手机验证码" class="headerlink" title="3、自动登录京东会遇到手机验证码"></a>3、自动登录京东会遇到手机验证码</h4><ul>
<li>通过账号密码登录即使通过滑块验证也需要获取手机验证码。京东手机验证码的cookie有效时间是一个月，所以每隔一个月运行脚本时要重新获取一次手机验证码</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>java 单元测试</title>
    <url>/2023/05/31/java-UT/</url>
    <content><![CDATA[<h1 id="小谈-Java-单元测试"><a href="#小谈-Java-单元测试" class="headerlink" title="小谈 Java 单元测试"></a>小谈 Java 单元测试</h1><h2 id="什么是UT"><a href="#什么是UT" class="headerlink" title="什么是UT?"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">什么是UT?</a></h2><p>UT（Unit Test）即单元测试</p>
<h2 id="UT有什么价值"><a href="#UT有什么价值" class="headerlink" title="UT有什么价值?"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">UT有什么价值?</a></h2><p>大部分的开发都不喜欢写UT，原因无非以下几点：</p>
<ol>
<li>产品经理天天催进度，哪有时间写UT</li>
<li>UT是测试自己的代码，自测？那要QA何用？</li>
<li>自测能测出bug？都是基于自身思维，就像考试做完第一遍，第二遍检查一样，基本检查不出什么东西</li>
<li>UT维护成本太高,投入产出比太低</li>
<li>不会写UT</li>
</ol>
<p>总之有无数种理由不想写UT，作为工作不到三年的菜鸟深有体会。之前在点评工作的时候，团队的“UT”都集中于RPC的服务端。为啥带双引号？因为RPC的服务端没有页面可以功能测试，部署到测试环境测试太麻烦，只能写UT了。在这个场景下我认为叫“验证”更合适，验证不等于测试。验证往往只写主逻辑是否通过，且就一个Case，且没有Assert，有的是System.out。</p>
<p>本人实习的时候做测试的，那时候知道一个测试模型。</p>
<p>越底层做的测试效果越好，越往上则越差。也就是说大部分公司现在做的功能测试其实是效果最差的一种测试方式。另外，QA界有个现场：大家都知道功能测试没技术含量，那如何使自己突出呢？答案就是：自动化测试。现实是没几个公司能做好自动化测试， 业界做的比较好的百度算一个。那么为啥自动化测试这么难做的？在这个模型当中，越往上黑盒越大，自动化测试难度就越大。这句话反过来就是越往下自动化测试就越好做？没错，UT其实是最容易实现且效果最好的自动化测试。所以在很多公司出现一种现场：QA写UT。原因总结一下就两点：开发不愿意写UT，QA想自动化测试解放自己。以上的模型只是理论上说明UT具有巨大的价值，但是真的如此么？我只想说，只有真正尝到UT的好处的甜头才会意识到UT的价值。</p>
<h1 id="Unit-Test-amp-Integration-Test"><a href="#Unit-Test-amp-Integration-Test" class="headerlink" title="Unit Test &amp; Integration Test"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">Unit Test &amp; Integration Test</a></h1><p>单元测试和集成测试的界线我相信大部分开发也是不清晰的。个人理解单元测试针对于一块业务逻辑最小的单元，太抽象。物理上可以简单理解为一个类的方法， 可以是public方法也可以是private方法。一个单元测试不应该包含外部依赖的逻辑，反之就是集成测试了。问题的核心就在于此。一个service的一个接口实现可能依赖很多第三方：1.本地其它的service 2.dao调用 3.rpc调用 4.微服务调用。</p>
<p>也就是说你的单元测试，真正调用了外部依赖那就是集成测试。这其实很常见对不？我们先说这种情况下如何集成测试。</p>
<h2 id="Local-Integration-Test"><a href="#Local-Integration-Test" class="headerlink" title="Local Integration Test"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">Local Integration Test</a></h2><p>本地集成测试也就是说不依赖与其他进程。包括：service依赖其他本地service或者dao的情况。在讲述如何集成测试之前，我们先理一下测试模型，测试主要包含三块内容：1.数据准备 2.执行逻辑 3.输出验证。</p>
<h3 id="第一步：数据准备"><a href="#第一步：数据准备" class="headerlink" title="第一步：数据准备"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">第一步：数据准备</a></h3><p>在本地集成测试里，数据来源基本上来自于dao，dao来自于sql。也就是在执行一个case之前，执行一些sql脚本，数据库则使用h2这类memory database， 切记不要依赖公司测试环境的db。下图是使用spring-test框架的一个case，可以在case执行之前准备我们所需要的各种数据， 另外在执行完case之后，执行clean.sql脚本来清理脏数据。<strong>这里也说明一个case的执行环境是完全独立的，case之间互不干扰，这很重要。</strong></p>
<h3 id="第二步：执行逻辑最简单，就是调用一下我们测试的方法即可"><a href="#第二步：执行逻辑最简单，就是调用一下我们测试的方法即可" class="headerlink" title="第二步：执行逻辑最简单，就是调用一下我们测试的方法即可"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">第二步：执行逻辑最简单，就是调用一下我们测试的方法即可</a></h3><h3 id="第三步：验证"><a href="#第三步：验证" class="headerlink" title="第三步：验证"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">第三步：验证</a></h3><p>集成测试一般是调用service，或者dao的接口验证。</p>
<p>举个例子：CRUD操作的集成测试</p>
<ol>
<li>调用C接口</li>
<li>调用R接口，验证C成功</li>
<li>调用U接口</li>
<li>调用R接口，验证U成功</li>
<li>调用D接口</li>
<li>调用R接口，验证D成功</li>
</ol>
<h2 id="Remote-Integration-Test"><a href="#Remote-Integration-Test" class="headerlink" title="Remote Integration Test"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">Remote Integration Test</a></h2><p>假设我们一个service实现依赖某个RPC Service</p>
<h3 id="第一步：数据准备-1"><a href="#第一步：数据准备-1" class="headerlink" title="第一步：数据准备"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">第一步：数据准备</a></h3><p>跑到别人家的数据库插几条数据？或者跟PRC Service的Owner商量好，搭一个测试环境供我们测试？有些公司还真有专门的自动化测试环境，那么即使有测试环境，那如何实现各种case场景下，第三方Service很配合的返回数据给我们？想想都蛋疼。</p>
<h3 id="第二步：执行方法"><a href="#第二步：执行方法" class="headerlink" title="第二步：执行方法"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">第二步：执行方法</a></h3><p>假设我们成功的解决了第一步中的问题，皆大欢喜。现在来看第二步，假设我们的service里面调用了另一个RPC Service创建了很多数据，跑了无数次case，结果….RPC Service对应的数据库都是我们的脏数据，如何清理？而且他们敢随便删数据吗？想想也蛋疼。</p>
<h3 id="第三步：输出验证"><a href="#第三步：输出验证" class="headerlink" title="第三步：输出验证"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">第三步：输出验证</a></h3><p>假设我们又愉快的解决了第二步中的问题。现在来看第三步，假设我们的方法执行最终输出是创建了一个订单，订单当然是调用订单Service接口了，那么我们如何验证订单是否成功创建了呢？或许可以调用订单Service查询订单的接口来验证。很明显大多数情况下并没有这么完美。想想也蛋疼呀。</p>
<p>通过以上分析，Local Integration Test是可行的，Remote Integration Test基本不可行。</p>
<p>那么有没有什么办法解决呢？答案就是Mock</p>
<ul>
<li>第一步：Mock RPC Service 想返回什么数据就返回什么数据</li>
<li>第二步：还是Mock接口，想调用几次就调用几次</li>
<li>第三步：这一步等到下面讲完单元测试就明白了</li>
</ul>
<h2 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">Unit Test</a></h2><p>上面我们谈到Mock可以解决外部依赖的问题，现在有很多Mock的开源框架比如：mockito。那么问题来了，既然我们可以mock第三方远程依赖，为何不mock dao、local service呢？没错外部依赖全部mock掉，就是单元测试了。因为我们只关心所测试的方法的业务逻辑，也就是真正高内聚的逻辑单元了。如下图：</p>
<p>好处如下：</p>
<ol>
<li>没有什么数据是造不出来的，通通返回Mock的对象</li>
<li>代码中的异常处理代码，也可以通过mock接口，使之抛出异常</li>
<li>不产生任何脏数据</li>
<li>跑case更快了，因为不用启动整个项目，相当于Main方法</li>
</ol>
<p>有人会说，都mock了还测试个蛋蛋。</p>
<p>这就是对于单元测试的理解了，单元测试应该只针对于目标方法的业务逻辑测试，dao、其它service应该在它们自身的单元测试去测试。对于依赖的第三方，我们应该信任它们能正确的完成我们所预期的。这句话很难理解对不对？</p>
<p>举几个例子</p>
<p>例子一：方法的最后是执行dao的create操作，那么该如何验证？</p>
<p>我们应该验证的内容是：</p>
<ol>
<li>dao的create方法被调用了</li>
<li>调用次数是对的</li>
<li>调用参数也是对的</li>
</ol>
<p>没错，只要这三个验证通过，那么这个case执行就是通过的。因为我们相信dao的create操作能正确的完成我们所预期的，只要我们调用了正确的次数并且参数都是对的。dao的执行的正确性保证是在该dao的单元测试做的。在Remote Integration Test里面第三步验证道理是一样的，我们应该验证RPC接口被调用了且次数和参数都是对的，那么我们的case就算通过了，至于，RPC服务端是否正确执行是它们的事情不是我们所关心的。Mockito框架的verify接口就是做这件事情的。如果你理解了上述内容，那么你就开窍了，UT不在变得这么难写。</p>
<p>什么时候用单元测试，什么时候用集成测试？</p>
<p>在本人的实践中摸索发现，对于简单的业务，比如crud型的瘦service，比较适合于集成测试。</p>
<p>以下情况适合于单元测试：</p>
<ol>
<li>Util类</li>
<li>含有远程调用的方法</li>
<li>输入少，业务逻辑复杂的方法</li>
<li>需要异常处理的方法</li>
</ol>
<h1 id="case细到什么程度为好？"><a href="#case细到什么程度为好？" class="headerlink" title="case细到什么程度为好？"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">case细到什么程度为好？</a></h1><p>这个问题也是比较经典的，一个方法要是所有的路径都覆盖到，那么要写很多的case，说真的累死人。我的建议是两个原则：</p>
<ol>
<li>核心逻辑，容易出错的逻辑一定要覆盖到</li>
<li>根据自己的时间。没必要写的非常多，毕竟case维护成本很高，业务逻辑一改，case得跟着改。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247487551&idx=1&sn=18f64ba49f3f0f9d8be9d1fdef8857d9&scene=21#wechat_redirect">总结</a></h1><p>本人目前在从事于开源项目(Apollo(配置中心))研发，开源项目对代码质量要求相对来说高一些，UT当然是很重要的一环。刚开始也不会写UT，当然态度上也不重视UT。老大的代码UT覆盖率很高，抱着对开源负责的态度慢慢接受学习UT，到后来尝了几次甜头后，发现UT真的很实用，价值也很高，但是很遗憾UT被大部分开发所忽略。当然本人对UT的理解、实践还不够，仍需继续实践模式。</p>
<p>最后说一句：当开发完功能，跑完UT，你可以放心的上线了的时候，你的UT就成功了。\</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Unit Test</tag>
      </tags>
  </entry>
</search>
